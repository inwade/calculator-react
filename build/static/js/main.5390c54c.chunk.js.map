{"version":3,"sources":["components/Button/Button.js","components/CalculatorHolder/CalculatorHolder.js","components/Input/Input.js","components/ClearButton/ClearButton.js","App.js","serviceWorker.js","index.js"],"names":["Button","className","this","props","classes","id","onClick","handler","symbol","React","Component","currentInput","historyInput","result","CalculatorHolder","state","inputData","handleOperations","bind","handleEqualizer","handleClear","event","p","target","closest","push","innerHTML","join","setState","eval","toFixed","data","Input","ClearButton","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5390c54c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Button.css';\r\n\r\nclass Button extends React.Component {\r\n    render () {\r\n        return (\r\n        <div className={this.props.classes} id={this.props.id} onClick={this.props.handler}>\r\n            <p>{this.props.symbol}</p>\r\n        </div>\r\n         )\r\n    }\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport Input from '../Input/Input';\r\nimport ClearButton from '../ClearButton/ClearButton';\r\nimport Button from '../Button/Button';\r\nimport './CalculatorHolder.css';\r\n\r\nlet currentInput = []\r\nlet historyInput;\r\nlet result = 0;\r\n\r\nclass CalculatorHolder extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n            inputData: '0'\r\n        };\r\n        this.handleOperations = this.handleOperations.bind(this);\r\n        this.handleEqualizer = this.handleEqualizer.bind(this);\r\n        this.handleClear = this.handleClear.bind(this);\r\n    }\r\n    handleOperations (event) {\r\n        let p = event.target.closest('p');\r\n        if (result != 0) {\r\n            currentInput = [];\r\n            currentInput.push(result);\r\n            result = 0;\r\n        }\r\n\r\n        currentInput.push(p.innerHTML);\r\n        historyInput = currentInput.join('');\r\n        \r\n        if (currentInput[0] == '0') {\r\n            currentInput = [];\r\n            historyInput = '0';\r\n        }\r\n        \r\n        this.setState({\r\n            inputData: historyInput\r\n        });\r\n    }\r\n    handleEqualizer () {\r\n        result = eval(historyInput);\r\n        result = result.toFixed(2);\r\n        this.setState({\r\n           inputData: result\r\n       })\r\n    }\r\n    handleClear () {\r\n        currentInput = [];\r\n        historyInput = '';\r\n        result = 0;\r\n        this.setState({\r\n            inputData: '0'\r\n        })\r\n    }\r\n  \r\n    render () {\r\n    return (\r\n        <div className=\"calculator-holder\">\r\n            <Input data={this.state.inputData} handler={this.handleEqualizer}/>\r\n            <div className=\"first-row\">\r\n                <ClearButton handler={this.handleClear}/>\r\n                <Button symbol={'0'} classes={\"button zero-button-borders calc-buttons\"} handler={this.handleOperations}/>\r\n                <Button symbol={'/'} classes={\"button divide-button-borders calc-actions\"} handler={this.handleOperations}/>\r\n            </div>\r\n            <div className=\"second-row\">\r\n                <Button symbol={'7'} classes={\"button seven-button-borders calc-buttons\"} handler={this.handleOperations}/>\r\n                <Button symbol={'8'} classes={\"button eight-button-borders calc-buttons\"} handler={this.handleOperations}/>\r\n                <Button symbol={'9'} classes={\"button nine-button-borders calc-buttons\"} handler={this.handleOperations}/>\r\n                <Button symbol={'-'} classes={\"button minus-button-borders calc-actions\"} handler={this.handleOperations}/>\r\n            </div>\r\n            <div className=\"third-row\">\r\n                <Button symbol={'4'} classes={'button seven-button-borders calc-buttons'} handler={this.handleOperations}/>\r\n                <Button symbol={'5'} classes={'button eight-button-borders calc-buttons'} handler={this.handleOperations}/>\r\n                <Button symbol={'6'} classes={'button nine-button-borders calc-buttons'} handler={this.handleOperations}/>\r\n                <Button symbol={'+'} classes={'button minus-button-borders calc-actions'} handler={this.handleOperations}/>\r\n            </div>\r\n            <div className=\"fourth-row\">\r\n                <Button symbol={'1'} classes={'button seven-button-borders calc-buttons'} handler={this.handleOperations}/>\r\n                <Button symbol={'2'} classes={'button eight-button-borders calc-buttons'} handler={this.handleOperations}/>\r\n                <Button symbol={'3'} classes={'button nine-button-borders calc-buttons'} handler={this.handleOperations}/>\r\n                <Button symbol={'='} classes={'button minus-button-borders calc-actions'} handler={this.handleEqualizer}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n}\r\n\r\nexport default CalculatorHolder","import React from 'react';\r\n\r\nimport './Input.css';\r\n\r\nclass Input extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"input\" onClick={this.props.handler}>\r\n                <h2>{this.props.data}</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\n\r\nimport './ClearButton.css';\r\n\r\nfunction ClearButton (props) {\r\n    return (\r\n        <div className=\"clear-button\" onClick={props.handler}>\r\n            <p>clear</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ClearButton;","import React from 'react';\nimport CalculatorHolder from './components/CalculatorHolder/CalculatorHolder'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CalculatorHolder />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}